<?php
// C:\xampp\htdocs\IYO_Smart_Pantry\api\donation_convert.php
require_once __DIR__ . '/config.php';

function s($v){ return is_string($v) ? trim($v) : ''; }

function format_pickup_location(array $a): string {
  $label   = s($a['label'] ?? '');
  $line1   = s($a['line1'] ?? '');
  $line2   = s($a['line2'] ?? '');
  $postcode= s($a['postcode'] ?? '');
  $city    = s($a['city'] ?? '');
  $state   = s($a['state'] ?? '');
  $country = s($a['country'] ?? '');
  $lines = [];
  $firstLine = trim(($label ? "$label, " : "").$line1);
  if ($firstLine !== '') $lines[] = $firstLine;
  if ($line2 !== '') $lines[] = $line2;
  $tail = implode(', ', array_filter([$postcode, $city, $state, $country]));
  if ($tail !== '') $lines[] = $tail;
  return implode("\n", $lines);
}

function format_picktime_string(array $slot): string {
  $d = s($slot['date'] ?? '');
  $s = s($slot['start'] ?? '');
  $e = s($slot['end'] ?? '');
  $n = s($slot['note'] ?? '');
  if (!$d) return '';
  $win = ($s && $e) ? "$s - $e" : ($s ?: $e);
  $core = $win ? "$d, $win" : $d;
  return $n ? "$core ($n)" : $core;
}

$d = json_input();
$userID   = s($d['userID']   ?? '');
$foodID   = s($d['foodID']   ?? '');
$donQty   = (float)($d['donateQty'] ?? 0);
$contact  = s($d['contact']  ?? '');
$note     = s($d['note']     ?? '');
$address  = is_array($d['address'] ?? null) ? $d['address'] : [];
$slots    = is_array($d['availability'] ?? null) ? $d['availability'] : [];

if (!$userID || !$foodID || $donQty <= 0 || !$contact) {
  respond(['ok'=>false,'error'=>'Missing userID/foodID/contact or invalid quantity'], 400);
}

try {
  $pdo->beginTransaction();

  // 1) Check available quantity with FOR UPDATE lock
  $stmt = $pdo->prepare("SELECT quantity FROM foods WHERE foodID = :fid FOR UPDATE");
  $stmt->execute([':fid'=>$foodID]);
  $avail = $stmt->fetchColumn();
  if ($avail === false) throw new RuntimeException('Food not found');
  if ($donQty > (float)$avail) {
    // do not proceed if trying to donate more than available
    throw new RuntimeException('Donate quantity exceeds available stock');
  }

  // 2) Deduct from foods
  $pdo->prepare("UPDATE foods SET quantity = quantity - :q WHERE foodID = :fid")
      ->execute([':q'=>$donQty, ':fid'=>$foodID]);

  // 3) Insert donation
  $pickupLocation = format_pickup_location($address);
  $ins = $pdo->prepare("INSERT INTO donations
    (quantity, contact, note, pickupLocation, foodID, userID)
    VALUES (:q, :contact, :note, :loc, :fid, :uid)");
  $ins->execute([
    ':q'       => $donQty,
    ':contact' => $contact,
    ':note'    => $note ?: null,
    ':loc'     => $pickupLocation ?: null,
    ':fid'     => $foodID,
    ':uid'     => $userID,
  ]);

  // fetch donationID generated by trigger (highest numeric for this user)
  $qDon = $pdo->prepare("SELECT donationID FROM donations WHERE userID = :uid ORDER BY CAST(SUBSTRING(donationID,2) AS UNSIGNED) DESC LIMIT 1");
  $qDon->execute([':uid'=>$userID]);
  $donationID = $qDon->fetchColumn();
  if (!$donationID) throw new RuntimeException('Failed to fetch donationID');

  // 4) Insert pickup times
  if (!empty($slots)) {
    $st = $pdo->prepare("INSERT INTO pickup_times (pickTime, donationID) VALUES (:t, :did)");
    foreach ($slots as $slt) {
      $txt = format_picktime_string($slt);
      if ($txt === '') continue;
      $st->execute([':t'=>$txt, ':did'=>$donationID]);
    }
  }

  $pdo->commit();
  respond(['ok'=>true, 'donationID'=>$donationID]);

} catch (Throwable $e) {
  if ($pdo->inTransaction()) $pdo->rollBack();
  // If we threw "exceeds stock", surface that message for the UI
  $msg = $e->getMessage();
  if (stripos($msg,'exceeds') !== false) {
    respond(['ok'=>false,'error'=>$msg], 400);
  }
  error_log('donation_convert: '.$msg);
  respond(['ok'=>false,'error'=>'DB error'], 500);
}
